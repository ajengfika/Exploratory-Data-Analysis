# -*- coding: utf-8 -*-
"""Introduction To Data Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gTdHrm6kGFHHWOVtgLAwLxurecTt3wXV

# Introduction to Data Analyst
Kita akan belajar tentang Exploratory Data Analysis

## Koneksi Gdrive kedalam Google Colab
"""

# Mengakses google drive ke dalam google colaboratory
from google.colab import drive
drive.mount('/content/gdrive')

"""## Import Packages/Library yang diperlukan"""

# Import library
import pandas as pd # library yang menyediakan analisis dan struktur data
from scipy.stats import mode # Mode : Nilai yang sering muncul dengan mengabaikan nilai nan
import os # Fungsi untuk interaksi dengan sistem operasi

"""## Import dan Read Data .csv
Import data OnlineRetail.csv yang sudah disimpan di gdrive masing-masing
"""

# Inisiasi directory tempat data akan dibaca dan disimpan yaitu dinamakan path
path = "gdrive/MyDrive/Materi/Day 1 - Materi/Data/" # Masukkan path sesuai dengan letak data di drive masing-masing

os.listdir(path) # Cek isi data dari path

# Membaca file csv
df = pd.read_csv(path + 'OnlineRetail.csv', encoding = "ISO-8859-1")

# Menampilkan 5 urutan teratas dari data
df.head()

"""Telah berhasil membaca format .csv selanjutnya akan dicontohkan cara membaca data dengan format xlsx.

### Read Excel File .xlsx

Membaca data OnlineRetail.xlsx yang sudah disimpan di gdrive masing-masing
"""

# Membaca file excel OnlineRetail.xlsx
df_xlsx = pd.read_excel(path + "OnlineRetail.xlsx")

# Menampilkan 5 urutan teratas dari data
df_xlsx.head()

"""Mulai sekarang kita mengerti bagaimana cara read data berformat .csv dan .xlsx. Untuk langkah selanjutnya menggunakan data OnlineRetail.csv

## Exploratory Data Analysis (EDA)
EDA adalah suatu proses analisa dan menyelidiki data hingga memunculkan suatu informasi, contohnya menemukan pola data, menemukan anomali dari data dan  lainnya.

### Data terdiri dari berapa baris dan berapa kolom ???
"""

# Mencari ukuran data
df.shape

"""Dari data diatas maka diketahui bahwa data tersebut terdiri dari **541909 baris** dan **8 kolom**.

### Bagaimana kondisi data nya? bermasalah atau tidak?
"""

# Melihat Informasi Data
df.info()

"""Data informasi berisi mengenai nama kolom, jumlah kolom, jumlah element dari masing-masing kolom dan tipe data dari masing-masing kolom. Informasi dari data memudahkan untuk mencari tahu apa saja yang perlu dilakukan seperti merubah format data dan melakukan manipulasi dalam data.

## Preprocessing Data
Dalam tahap ini dilakukan proses cleaning dan manipulasi data.

### Apakah ada Missing value ?
"""

# Cek missing value
df.isnull().sum()

"""Missing value merupakan data atau informasi yang hilang seperti nilai kosong (nan). Berdasarkan output diatas diketahui bahwa terdapat missing value pada kolom Description sebanyak 1454 dan CustomerID sebanyak 135080, oleh karena itu perlu dilakukan cleaning pada kedua kolom tersebut. Salah satu cara dalam handling missing value adalah menghapus data kosong (nan)."""

# Handling missing value dengan drop data
df = df.dropna(axis=0)

# Cek kembali missing value
df.isnull().sum()

df.info()

"""### Apakah ada Data Duplicate ?

Bila terdapat duplikat data maka analisa menjadi kurang valid dikarenakan terlalu banyak data yang seragam.
"""

# Mencari duplicate data
duplicate = df[df.duplicated()]

# Display data yang duplicate
duplicate

# Handling duplicate data
df = df.drop_duplicates()

df

"""Setelah dilakukan drop duplikat data, data yang dihasilkan menjadi 401604 baris dengan 8 kolom.

### Ubah Tipe data
Pengubahan tipe data dilakukan bila beberapa data yang memiliki tipe data yang kurang sesuai. Oleh karena itu pengubahan tipe data sangat diperlukan.
"""

# Mengubah tipe data 'InvoiceDate' kedalam bentuk Datetime
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])

# Mengubah tipe data 'CustomerID' kedalam bentuk Non-Metric atau string
df['CustomerID'] = df['CustomerID'].astype(int).astype(str)

# Mengecek kembali informasi dari data
df.info()

df.head()

"""Berdasarkan informasi data, dapat dilihat bahwa tipe data sudah berubah sesuai yang diharapkan dan semua kolom memiliki ukuran yang sama.

### Melakukan Analisa

#### Apa saja variabel yang termasuk dalam non-metric ?
"""

# Menampilkan kolom/variabel dengan tipe data non-metric atau string
non_metric = list(df.select_dtypes(include=['object']).columns)
df[non_metric].head()

"""#### Berapakah jumlah nilai yang unik pada setiap variabel ?"""

df[non_metric].agg(['nunique','count'])

"""Index nunique merupakan nilai unique dari tiap-tiap kolom, sedangkan count menunjukkan total keseluruhan data dalam kolom.

#### Informasi apa yang paling banyak muncul dari setiap variabel secara keseluruhan ?
"""

# Mencari modus dari data non-metric
df[non_metric].mode()

"""#### Informasi apa yang paling banyak muncul dan berapakah jumlah nilai yang unik dari setiap variabel pada setiap negara ?"""

# Membuat analisa berdasarkan country dan mencari tahu informasi seperti unique value, total data, dan modus pada setiap variabel
df.groupby('Country').agg(['nunique','count',pd.Series.mode]).stack()

"""#### Berapa rata-rata, nilai minimum, nilai maksimum kuantitas barang yang terujual dan harganya ? """

# Melihat summary dari data yang telah di cleaning
df.describe()

"""### Menambahkan Variabel Baru
Dalam menganalisa data terkadang kita dapat menemukan informasi yang kita miliki sebagai contoh kolom InvoiceDate . Kolom InvoiceDate dapat kita manfaatkan untuk memperoleh informasi lain seperti year, month dan day.
"""

# Menambahkan kolom baru 
df['year'], df['month'], df['day'] = df['InvoiceDate'].dt.year, df['InvoiceDate'].dt.month, df['InvoiceDate'].dt.day

# Menampilkan 5 urutan terakhir dari data
df.tail()

"""## Exporting Data
Berikut merupakan cara untuk menyimpan data hasil preprocessing 
"""

# Export data kedalam format csv
df.to_csv(path + 'Clean_OnlineRetail.csv', index=None) # keterangan index dalam data ini tidak akan disimpan

# Export data kedalam format excel
df.to_excel(path + 'Clean_OnlineRetail.xlsx', index=None)